// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const addParticipantsToChat = `-- name: AddParticipantsToChat :exec
INSERT INTO conversation_participants (user_id, conversation_id, is_admin) VALUES (?, ?, ?)
`

type AddParticipantsToChatParams struct {
	UserID         int64
	ConversationID int64
	IsAdmin        sql.NullInt64
}

// conversation_participants
func (q *Queries) AddParticipantsToChat(ctx context.Context, arg AddParticipantsToChatParams) error {
	_, err := q.db.ExecContext(ctx, addParticipantsToChat, arg.UserID, arg.ConversationID, arg.IsAdmin)
	return err
}

const checkPrivateChatExist = `-- name: CheckPrivateChatExist :one
select c.id from conversations c
                     join conversation_participants cp on cp.conversation_id = c.id
                     JOIN conversation_participants cp2 on cp2.conversation_id = c.id
where c.is_group = 0 and cp.user_id = ? and cp2.user_id = ?
`

type CheckPrivateChatExistParams struct {
	UserID   int64
	UserID_2 int64
}

func (q *Queries) CheckPrivateChatExist(ctx context.Context, arg CheckPrivateChatExistParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkPrivateChatExist, arg.UserID, arg.UserID_2)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const checkUserExist = `-- name: CheckUserExist :one
SELECT EXISTS(SELECT 1 from users where id = ?) as exist
`

func (q *Queries) CheckUserExist(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserExist, id)
	var exist int64
	err := row.Scan(&exist)
	return exist, err
}

const checkUserInChat = `-- name: CheckUserInChat :one
SELECT EXISTS(select 1 from conversation_participants where user_id = ? and conversation_id = ?) as exist
`

type CheckUserInChatParams struct {
	UserID         int64
	ConversationID int64
}

func (q *Queries) CheckUserInChat(ctx context.Context, arg CheckUserInChatParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserInChat, arg.UserID, arg.ConversationID)
	var exist int64
	err := row.Scan(&exist)
	return exist, err
}

const confirmAccount = `-- name: ConfirmAccount :exec
UPDATE users SET email_confirmed = 1 WHERE id = ?
`

func (q *Queries) ConfirmAccount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, confirmAccount, id)
	return err
}

const createConversation = `-- name: CreateConversation :one
INSERT INTO conversations (is_group, name) VALUES (?, ?) RETURNING id, is_group, name, created_at
`

type CreateConversationParams struct {
	IsGroup sql.NullInt64
	Name    sql.NullString
}

// Conversations
func (q *Queries) CreateConversation(ctx context.Context, arg CreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, arg.IsGroup, arg.Name)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.IsGroup,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (conversation_id, sender_id, content) VALUES (?, ?, ?) RETURNING id, conversation_id, sender_id, content, sent_at
`

type CreateMessageParams struct {
	ConversationID int64
	SenderID       sql.NullInt64
	Content        string
}

// Messages
func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.ConversationID, arg.SenderID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.SenderID,
		&i.Content,
		&i.SentAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username,username_normalized, password_hash, email, email_normalized)
VALUES (?1,LOWER(?1), ?2,?3, LOWER(?3)) RETURNING id, username, username_normalized, password_hash, email, email_normalized, email_confirmed, avatar_path, created_at
`

type CreateUserParams struct {
	Username     sql.NullString
	PasswordHash sql.NullString
	Email        sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.PasswordHash, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UsernameNormalized,
		&i.PasswordHash,
		&i.Email,
		&i.EmailNormalized,
		&i.EmailConfirmed,
		&i.AvatarPath,
		&i.CreatedAt,
	)
	return i, err
}

const deleteConversation = `-- name: DeleteConversation :exec
DELETE FROM conversations WHERE id = ?
`

func (q *Queries) DeleteConversation(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteConversation, id)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteParticipantsFromChat = `-- name: DeleteParticipantsFromChat :exec
DELETE FROM conversation_participants WHERE user_id = ? and conversation_id = ?
`

type DeleteParticipantsFromChatParams struct {
	UserID         int64
	ConversationID int64
}

func (q *Queries) DeleteParticipantsFromChat(ctx context.Context, arg DeleteParticipantsFromChatParams) error {
	_, err := q.db.ExecContext(ctx, deleteParticipantsFromChat, arg.UserID, arg.ConversationID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getConversationById = `-- name: GetConversationById :one
SELECT id, is_group, name, created_at FROM conversations WHERE id = ? LIMIT 1
`

func (q *Queries) GetConversationById(ctx context.Context, id int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationById, id)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.IsGroup,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestChats = `-- name: GetLatestChats :many
select m.id, m.conversation_id, m.sender_id, m.content, m.sent_at from messages m
                    JOIN (SELECT conversation_id, MAX(sent_at) as last_sent
                          from messages GROUP BY conversation_id) latest on m.conversation_id = latest.conversation_id
    and m.sent_at = latest.last_sent
                    JOIN conversation_participants cp on cp.conversation_id = m.conversation_id
where cp.user_id = ?
order by m.sent_at desc
`

func (q *Queries) GetLatestChats(ctx context.Context, userID int64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getLatestChats, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.SenderID,
			&i.Content,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, conversation_id, sender_id, content, sent_at from messages WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessageById(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ConversationID,
		&i.SenderID,
		&i.Content,
		&i.SentAt,
	)
	return i, err
}

const getMessageThread = `-- name: GetMessageThread :many
SELECT id, conversation_id, sender_id, content, sent_at FROM messages WHERE conversation_id = ?
                       ORDER BY sent_at DESC
                           LIMIT ? OFFSET ?
`

type GetMessageThreadParams struct {
	ConversationID int64
	Limit          int64
	Offset         int64
}

func (q *Queries) GetMessageThread(ctx context.Context, arg GetMessageThreadParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessageThread, arg.ConversationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ConversationID,
			&i.SenderID,
			&i.Content,
			&i.SentAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, username_normalized, password_hash, email, email_normalized, email_confirmed, avatar_path, created_at from users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UsernameNormalized,
		&i.PasswordHash,
		&i.Email,
		&i.EmailNormalized,
		&i.EmailConfirmed,
		&i.AvatarPath,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, username_normalized, password_hash, email, email_normalized, email_confirmed, avatar_path, created_at from users
WHERE email_normalized = LOWER(?) LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UsernameNormalized,
		&i.PasswordHash,
		&i.Email,
		&i.EmailNormalized,
		&i.EmailConfirmed,
		&i.AvatarPath,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, username_normalized, password_hash, email, email_normalized, email_confirmed, avatar_path, created_at from users
WHERE username_normalized = LOWER(?) LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, lower string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, lower)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.UsernameNormalized,
		&i.PasswordHash,
		&i.Email,
		&i.EmailNormalized,
		&i.EmailConfirmed,
		&i.AvatarPath,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, username_normalized, password_hash, email, email_normalized, email_confirmed, avatar_path, created_at FROM users
ORDER BY username
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.UsernameNormalized,
			&i.PasswordHash,
			&i.Email,
			&i.EmailNormalized,
			&i.EmailConfirmed,
			&i.AvatarPath,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateConversationName = `-- name: UpdateConversationName :exec
UPDATE conversations SET name = ? WHERE id = ?
`

type UpdateConversationNameParams struct {
	Name sql.NullString
	ID   int64
}

func (q *Queries) UpdateConversationName(ctx context.Context, arg UpdateConversationNameParams) error {
	_, err := q.db.ExecContext(ctx, updateConversationName, arg.Name, arg.ID)
	return err
}

const updateMessageText = `-- name: UpdateMessageText :exec
UPDATE messages SET content = ? where id = ?
`

type UpdateMessageTextParams struct {
	Content string
	ID      int64
}

func (q *Queries) UpdateMessageText(ctx context.Context, arg UpdateMessageTextParams) error {
	_, err := q.db.ExecContext(ctx, updateMessageText, arg.Content, arg.ID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = ?1, username_normalized = LOWER(?1) WHERE id = ?2
`

type UpdateUserParams struct {
	Username sql.NullString
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Username, arg.ID)
	return err
}
